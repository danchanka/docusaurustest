(window.webpackJsonp=window.webpackJsonp||[]).push([[427,436],{501:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return s})),r.d(t,"metadata",(function(){return b})),r.d(t,"toc",(function(){return c})),r.d(t,"default",(function(){return i}));var a=r(3),n=r(7),o=(r(0),r(750)),p=r(57),s={title:"EXPORT operator"},b={unversionedId:"EXPORT_operator",id:"EXPORT_operator",isDocsHomePage:!1,title:"EXPORT operator",description:"The EXPORT operator: creates an action that exports specified\xa0properties\xa0to a file,\xa0or, in common case, that opens a form\xa0in a structured view.",source:"@site/docs/EXPORT_operator.md",slug:"/EXPORT_operator",permalink:"/docusaurustest/docs/next/EXPORT_operator",editUrl:"https://github.com/danchanka/docusaurustest/edit/master/docs/EXPORT_operator.md",version:"current",sidebar:"docs",previous:{title:"EXEC operator",permalink:"/docusaurustest/docs/next/EXEC_operator"},next:{title:"EXTERNAL operator",permalink:"/docusaurustest/docs/next/EXTERNAL_operator"}},c=[{value:"Syntax",id:"syntax",children:[]},{value:"Parameters",id:"parameters",children:[]},{value:"<em>Source of export\xa0</em>",id:"source-of-export",children:[]},{value:"<em>Export format</em>",id:"export-format",children:[]},{value:"<em>Export destination</em>",id:"export-destination",children:[]},{value:"propertyIdM\xa0<em>, ...,\xa0</em>propertyIdM",id:"propertyidm---propertyidm",children:[]},{value:"Examples",id:"examples",children:[]}],l={toc:c};function i(e){var t=e.components,r=Object(n.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The ",Object(o.b)("strong",{parentName:"p"},"EXPORT")," operator: creates an ",Object(o.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/Actions"},"action")," that exports ",Object(o.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/Data_export_EXPORT_"},"specified\xa0properties"),"\xa0to a file,\xa0or, in common case, that ",Object(o.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/In_a_structured_view_EXPORT_IMPORT_"},"opens a form"),"\xa0in a structured view.\xa0"),Object(o.b)("h3",{id:"syntax"},"Syntax"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"EXPORT [exportFormat] [TOP n] FROM [columnId1 =] propertyExpr1, ..., [columnIdN = ] propertyExprN [WHERE whereExpr] [ORDER orderExpr1 [DESC], ..., orderExprL [DESC]] [TO propertyId]\nEXPORT formName [OBJECTS objName1 = expr1, ..., objNameK = exprK] [exportFormat] [TOP n] [TO (propertyId | (groupId1 = propertyId1, ..., groupIdN = propertyIdM))]\n")),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"exportFormat"),"\xa0can be specified by one of the following options:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"JSON [CHARSET charsetStr]\nXML [ATTR] [CHARSET charsetStr]\nCSV [separator] [HEADER | NOHEADER] [ESCAPE | NOESCAPE] [CHARSET charsetStr]\nXLS [HEADER | NOHEADER]\nXLSX [HEADER | NOHEADER]\nDBF [CHARSET charsetStr]\nTABLE\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("br",{parentName:"strong"}),"Description")),Object(o.b)("p",null,"The ",Object(o.b)("strong",{parentName:"p"},"EXPORT")," operator creates an action that exports data from the specified properties or form to a file. The following file formats are supported: ",Object(o.b)("strong",{parentName:"p"},"XML"),",\xa0",Object(o.b)("strong",{parentName:"p"},"JSON"),",**\xa0",Object(o.b)("strong",{parentName:"p"},"CSV**"),",\xa0",Object(o.b)("strong",{parentName:"p"},"XLS"),", ",Object(o.b)("strong",{parentName:"p"},"XLSX"),", ",Object(o.b)("strong",{parentName:"p"},"DBF"),",\xa0",Object(o.b)("strong",{parentName:"p"},"TABLE"),".\xa0"),Object(o.b)("p",null,"If no*\xa0",Object(o.b)("em",{parentName:"p"},"export file format"),"\xa0*is specified, it is considered to be ",Object(o.b)("strong",{parentName:"p"},"JSON"),"."),Object(o.b)("p",null,"If the property to which the data is exported is of class ",Object(o.b)("strong",{parentName:"p"},"FILE"),", then the extension of the resulting file is determined depending on the format as follows:"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:null},Object(o.b)("p",null,"Format")),Object(o.b)("th",{parentName:"tr",align:null},Object(o.b)("p",null,"Extension")))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("strong",null,"JSON")),Object(o.b)("td",{parentName:"tr",align:null},"json")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("strong",null,"XML")),Object(o.b)("td",{parentName:"tr",align:null},"xml")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("strong",null,"CSV")),Object(o.b)("td",{parentName:"tr",align:null},"csv")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("strong",null,"XLS")),Object(o.b)("td",{parentName:"tr",align:null},"xls")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("strong",null,"XLSX")),Object(o.b)("td",{parentName:"tr",align:null},"xlsx")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("strong",null,"DBF")),Object(o.b)("td",{parentName:"tr",align:null},"dbf")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("strong",null,"TABLE")),Object(o.b)("td",{parentName:"tr",align:null},"table")))),Object(o.b)("p",null,"When exporting a form in an\xa0",Object(o.b)("strong",{parentName:"p"},"OBJECTS"),"\xa0block, it is possible to add extra filters to check for the equality of the objects on the form with ",Object(o.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/Open_form#params"},"the values passed"),". These objects ",Object(o.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/Structured_view#objects-broken"},"will not participate")," in building the object group hierarchy."),Object(o.b)("h3",{id:"parameters"},"Parameters"),Object(o.b)("h3",{id:"source-of-export"},Object(o.b)("em",{parentName:"h3"},"Source of export\xa0")),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"formName")),Object(o.b)("p",null,"The name of the form from which you want to export data.\xa0",Object(o.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/IDs#cid-broken"},"Composite ID"),"."),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"objName1 ... objNameK")),Object(o.b)("p",null,"Names of form objects for which filtered (fixed) values are specified.\xa0",Object(o.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/IDs#id-broken"},"Simple IDs"),"."),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"expr1 ... exprK")),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/Expression"},"Expressions")," whose values determine the filtered (fixed) values for form objects."),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"propertyExpr1, ..., propertyExprN")),Object(o.b)("p",null,"List\xa0of ",Object(o.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/Expression"},"expressions")," from whose values the data is exported.\xa0Each property is mapped to a table column of the result file."),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"columnId1, ..., columnIdN")),Object(o.b)("p",null,"A list of column IDs in the resulting file into which data from the corresponding property will be exported. Each list element is either\xa0",Object(o.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/IDs#id-broken"},"a simple ID")," or\xa0a ",Object(o.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/Literals#strliteral-broken"},"string literal"),".\xa0If no ID is specified, it is considered equal to expr<Column number",">"," by default."),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"whereExpr")),Object(o.b)("p",null,"An expression whose value is a condition for the export. If not specified, it is considered equal to\xa0the ",Object(o.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/Logical_operators_AND_OR_NOT_XOR_"},"disjunction")," of\xa0all exported properties (that is, at least one of the properties must be\xa0non-",Object(o.b)("strong",{parentName:"p"},"NULL"),")."),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"orderExpr1, ..., orderExprL")),Object(o.b)("p",null,"List\xa0of ",Object(o.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/Expression"},"expressions")," by which the exported data is sorted. Only properties present in the list ",Object(o.b)("em",{parentName:"p"},"propertyExpr1, ..., propertyExprN")," can be used"),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"DESC")),Object(o.b)("p",null,"Keyword. Specifies reverse sort order. By default, ascending sort is used."),Object(o.b)("h3",{id:"export-format"},Object(o.b)("em",{parentName:"h3"},"Export format")),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"ATTR")),Object(o.b)("p",null,"A keyword that specifies that values should be exported to the attributes of the parent tag. If not specified, the values are exported to child tags. Only applicable for export to\xa0",Object(o.b)("strong",{parentName:"p"},"XML"),"."),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"separator")),Object(o.b)("p",null,"Delimiter in a ",Object(o.b)("strong",{parentName:"p"},"CSV"),"\xa0file.\xa0",Object(o.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/Literals#strliteral-broken"},"String literal"),". If not specified, then the default delimiter is '",Object(o.b)("strong",{parentName:"p"},";")," '."),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"HEADER | NOHEADER")),Object(o.b)("p",null,"Keywords specifying the presence (HEADER) or absence (NOHEADER) of a header string in\xa0a ",Object(o.b)("strong",{parentName:"p"},"CSV"),", ",Object(o.b)("strong",{parentName:"p"},"xls"),", or ",Object(o.b)("strong",{parentName:"p"},"xlsx")," file. The default is NOHEADER."),Object(o.b)("p",null,"When using the NOHEADER option:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"if the column name is one of the predefined names (A, B, ..., Z, AA, ...,\xa0AE), it is exported to the column with the corresponding number, and the following columns are exported to the columns next in order after this column.")))),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"ESCAPE | NOESCAPE")),Object(o.b)("p",null,"Keyword specifying the presence (ESCAPE) or absence (NOESCAPE) of escaping for special characters (","\\","\\","r, ","\\","\\",'n, " (double quotes) and the specified delimiter (',Object(o.b)("em",{parentName:"p"},"separator"),") in\xa0a ",Object(o.b)("strong",{parentName:"p"},"CSV"),"\xa0file. It makes sense to use NOESCAPE only in cases where the specified delimiter is guaranteed not to occur in the data. The default is ESCAPE."),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"CHARSET charsetStr")),Object(o.b)("p",null,"An option specifying the encoding used for export."),Object(o.b)("p",null,"charsetStr is a string literal that defines the encoding.\xa0"),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"TOP n")),Object(o.b)("p",null,"Exports only the first n records.\xa0",Object(o.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/Literals#intliteral-broken"},"Integer literal"),"."),Object(o.b)("h3",{id:"export-destination"},Object(o.b)("em",{parentName:"h3"},"Export destination")),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"propertyId")),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/IDs#propertyid-broken"},"Property ID")," to which the generated file will be written. This property must not have parameters and its value must be of a file class (",Object(o.b)("strong",{parentName:"p"},"FILE"),",\xa0",Object(o.b)("strong",{parentName:"p"},"RAWFILE"),",\xa0",Object(o.b)("strong",{parentName:"p"},"JSONFILE"),", etc.).\xa0If this property is not specified, the ",Object(o.b)("strong",{parentName:"p"},"System.exportFile")," property is used by default."),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"groupId1, ..., groupIdM")),Object(o.b)("p",null,"Names of object groups from the exported form for which you want to export data.\xa0",Object(o.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/IDs#id-broken"},"Simple IDs"),".\xa0Used only for exporting forms to flat formats."),Object(o.b)("h3",{id:"propertyidm---propertyidm"},"propertyIdM\xa0",Object(o.b)("em",{parentName:"h3"},", ...,\xa0"),"propertyIdM"),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/IDs#propertyid-broken"},"Property IDs")," to which the generated files for specified object groups will be written. These properties must not have parameters and their value must be of file classes (",Object(o.b)("strong",{parentName:"p"},"FILE"),",\xa0",Object(o.b)("strong",{parentName:"p"},"RAWFILE"),",\xa0",Object(o.b)("strong",{parentName:"p"},"JSONFILE"),", etc.). Used only for exporting forms to flat formats.\xa0For\xa0the",Object(o.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/Static_view#empty"},"empty group"),"\xa0of objects, the name\xa0",Object(o.b)("strong",{parentName:"p"},"root")," is used.\xa0"),Object(o.b)("h3",{id:"examples"},"Examples"),Object(o.b)(p.CodeSample,{url:"https://documentation.lsfusion.org/sample?file=ActionSample&block=exportplain",mdxType:"CodeSample"}),Object(o.b)(p.CodeSample,{url:"https://documentation.lsfusion.org/sample?file=ActionSample&block=export",mdxType:"CodeSample"}))}i.isMDXComponent=!0},57:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return c})),r.d(t,"metadata",(function(){return l})),r.d(t,"toc",(function(){return i})),r.d(t,"CodeSample",(function(){return u})),r.d(t,"default",(function(){return m}));var a=r(3),n=r(7),o=r(0),p=r.n(o),s=r(750),b=r(751),c={},l={unversionedId:"CodeSample",id:"CodeSample",isDocsHomePage:!1,title:"CodeSample",description:"const [content, setContent] = useState('')",source:"@site/docs/CodeSample.mdx",slug:"/CodeSample",permalink:"/docusaurustest/docs/next/CodeSample",editUrl:"https://github.com/danchanka/docusaurustest/edit/master/docs/CodeSample.mdx",version:"current"},i=[],u=function(e){var t=e.url,r=e.lines,a=Object(o.useState)(""),n=a[0],c=a[1];return Object(o.useEffect)((function(){fetch(t).then((function(e){return e.text()})).then((function(e){return c(e)}))}),[t,c]),n?r?Object(s.b)(p.a.Fragment,null,Object(s.b)(b.a,{className:"lsf",metastring:r,mdxType:"CodeBlock"},n),Object(s.b)("br",null)):Object(s.b)(p.a.Fragment,null,Object(s.b)(b.a,{className:"lsf",mdxType:"CodeBlock"},n),Object(s.b)("br",null)):Object(s.b)(b.a,{className:"lsf",mdxType:"CodeBlock"},"loading...")},d={toc:i,CodeSample:u};function m(e){var t=e.components,r=Object(n.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},d,r,{components:t,mdxType:"MDXLayout"}))}m.isMDXComponent=!0}}]);