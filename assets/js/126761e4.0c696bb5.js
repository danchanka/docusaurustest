(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{100:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return n})),r.d(t,"metadata",(function(){return b})),r.d(t,"toc",(function(){return s})),r.d(t,"default",(function(){return u}));var a=r(3),o=r(7),p=(r(0),r(424)),n={title:"Property operators"},b={unversionedId:"Property_operators",id:"Property_operators",isDocsHomePage:!1,title:"Property operators",description:"Property operator\xa0is a syntax construct that describes an operator creating a property.",source:"@site/docs/Property_operators.md",slug:"/Property_operators",permalink:"/docusaurustest/docs/Property_operators",editUrl:"https://github.com/danchanka/docusaurustest/edit/master/docs/Property_operators.md",version:"current",sidebar:"docs",previous:{title:"Operator priority",permalink:"/docusaurustest/docs/Operator_priority"},next:{title:"Arithmetic operators",permalink:"/docusaurustest/docs/Arithmetic_operators"}},s=[{value:"Context dependent operators",id:"context-dependent-operators",children:[]},{value:"Context independent operators",id:"contextindependent",children:[]}],c={toc:s};function u(e){var t=e.components,r=Object(o.a)(e,["components"]);return Object(p.b)("wrapper",Object(a.a)({},c,r,{components:t,mdxType:"MDXLayout"}),Object(p.b)("p",null,Object(p.b)("em",{parentName:"p"},"Property operator"),"\xa0is a syntax construct that describes an ",Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/Operators"},"operator")," creating a ",Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/Properties"},"property"),".\xa0"),Object(p.b)("p",null,"Property operators can be divided into ",Object(p.b)("em",{parentName:"p"},"context dependent")," and ",Object(p.b)("em",{parentName:"p"},"context independent"),"."),Object(p.b)("h3",{id:"context-dependent-operators"},"Context dependent operators"),Object(p.b)("p",null,"Context dependent property operators can be part of ",Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/Expression"},"expressions")," and use common parameters\xa0(context). These operators are:"),Object(p.b)("ul",null,Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/Arithmetic_operators"},"Arithmetic operators"))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/Operator_"},Object(p.b)("strong",{parentName:"a"},"[","]")," operator"))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/ACTIVE_TAB_operator"},Object(p.b)("strong",{parentName:"a"},"ACTIVE TAB")," operator"))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/AGGR_operator"},Object(p.b)("strong",{parentName:"a"},"AGGR")," operator"))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/CASE_operator"},Object(p.b)("strong",{parentName:"a"},"CASE")," operator"))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/CLASS_operator"},Object(p.b)("strong",{parentName:"a"},"CLASS")," operator"))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/CONCAT_operator"},Object(p.b)("strong",{parentName:"a"},"CONCAT")," operator"))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/EXCLUSIVE_operator"},Object(p.b)("strong",{parentName:"a"},"EXCLUSIVE")," operator"))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/IF_operator"},Object(p.b)("strong",{parentName:"a"},"IF")," operator"))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/IF_..._THEN_operator"},Object(p.b)("strong",{parentName:"a"},"IF")," operator ... ",Object(p.b)("strong",{parentName:"a"},"THEN")," operator"))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/JOIN_operator"},Object(p.b)("strong",{parentName:"a"},"JOIN")," operator"))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/MAX_operator"},Object(p.b)("strong",{parentName:"a"},"MAX")," operator"))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/MIN_operator"},Object(p.b)("strong",{parentName:"a"},"MIN")," operator"))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/MULTI_operator"},Object(p.b)("strong",{parentName:"a"},"MULTI")," operator"))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/OVERRIDE_operator"},Object(p.b)("strong",{parentName:"a"},"OVERRIDE")," operator"))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/PARTITION_operator"},Object(p.b)("strong",{parentName:"a"},"PARTITION")," operator"))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/GROUP_operator"},Object(p.b)("strong",{parentName:"a"},"GROUP"),"\xa0operator"),"\xa0(without BY block)")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/PREV_operator"},Object(p.b)("strong",{parentName:"a"},"PREV")," operator"))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/RECURSION_operator"},Object(p.b)("strong",{parentName:"a"},"RECURSION")," operator"))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/STRUCT_operator"},Object(p.b)("strong",{parentName:"a"},"STRUCT")," operator"))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/UNGROUP_operator"},Object(p.b)("strong",{parentName:"a"},"UNGROUP")," operator"))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/Type_conversion_operator"},"Type conversion operator"))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/AND_OR_NOT_XOR_operators"},Object(p.b)("strong",{parentName:"a"},"AND"),", ",Object(p.b)("strong",{parentName:"a"},"OR"),", ",Object(p.b)("strong",{parentName:"a"},"NOT"),", ",Object(p.b)("strong",{parentName:"a"},"XOR")," operators"))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/IS_AS_operators"},Object(p.b)("strong",{parentName:"a"},"IS"),", ",Object(p.b)("strong",{parentName:"a"},"AS")," operators"))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/Change_operators"},"Change operators"))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/Comparison_operators"},"Comparison operators")))),Object(p.b)("h3",{id:"contextindependent"},"Context independent operators"),Object(p.b)("p",null,"Context independent property operators differ from the context dependent ones in that they do not just use the upper parameters but define the parameters themselves. As a result, they cannot be part of expressions and can only be used in the ",Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/Instruction_="},Object(p.b)("strong",{parentName:"a"},"=")," instruction")," and the ",Object(p.b)("a",{parentName:"p",href:"/docusaurustest/docs/JOIN_operator"},Object(p.b)("strong",{parentName:"a"},"JOIN")," operator"),":\xa0"),Object(p.b)("ul",null,Object(p.b)("li",{parentName:"ul"},Object(p.b)("a",{parentName:"li",href:"/docusaurustest/docs/DATA_operator"},Object(p.b)("strong",{parentName:"a"},"DATA")," operator")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("a",{parentName:"li",href:"/docusaurustest/docs/GROUP_operator"},Object(p.b)("strong",{parentName:"a"},"GROUP")," operator"),"\xa0(with BY block)"),Object(p.b)("li",{parentName:"ul"},Object(p.b)("a",{parentName:"li",href:"/docusaurustest/docs/FORMULA_operator"},Object(p.b)("strong",{parentName:"a"},"FORMULA")," operator")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("a",{parentName:"li",href:"/docusaurustest/docs/ABSTRACT_operator"},Object(p.b)("strong",{parentName:"a"},"ABSTRACT")," operator")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("a",{parentName:"li",href:"/docusaurustest/docs/Object_group_operator"},"Object group operators"))))}u.isMDXComponent=!0}}]);