(window.webpackJsonp=window.webpackJsonp||[]).push([[375,436],{449:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return u}));var r=n(3),a=n(7),l=(n(0),n(750)),b=n(57),c={title:"Arithmetic operators (+, -, *, ...)"},o={unversionedId:"Arithmetic_operators_+_-_..._",id:"Arithmetic_operators_+_-_..._",isDocsHomePage:!1,title:"Arithmetic operators (+, -, \\*, ...)",description:"Arithmetic operators\xa0create properties whose value is the result of an arithmetic operation.\xa0The arguments of these operators must be\xa0properties whose values are instances of number classes . The platform currently supports the following arithmetic operators:",source:"@site/docs/Arithmetic_operators_+_-_..._.md",slug:"/Arithmetic_operators_+_-_..._",permalink:"/docusaurustest/docs/next/Arithmetic_operators_+_-_..._",editUrl:"https://github.com/danchanka/docusaurustest/edit/master/docs/Arithmetic_operators_+_-_..._.md",version:"current",sidebar:"docs",previous:{title:"Primitive operations: Overview",permalink:"/docusaurustest/docs/next/Primitive_operations"},next:{title:"Logical operators (AND, OR, NOT, XOR)",permalink:"/docusaurustest/docs/next/Logical_operators_AND_OR_NOT_XOR_"}},s=[{value:"Determining the result class",id:"determining-the-result-class",children:[]},{value:"Language",id:"language",children:[]},{value:"Examples",id:"examples",children:[]}],i={toc:s};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(l.b)("wrapper",Object(r.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,Object(l.b)("em",{parentName:"p"},"Arithmetic operators"),"\xa0create ",Object(l.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/Properties"},"properties")," whose value is the result of an arithmetic operation.\xa0The arguments of these operators must be\xa0properties whose values are instances of ",Object(l.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/Built-in_classes"},"number classes")," . The platform currently supports the following arithmetic operators:"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Operator"),Object(l.b)("th",{parentName:"tr",align:null},"Name"),Object(l.b)("th",{parentName:"tr",align:null},"Description"),Object(l.b)("th",{parentName:"tr",align:null},"Example"),Object(l.b)("th",{parentName:"tr",align:null},"Result"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",null,"+")),Object(l.b)("td",{parentName:"tr",align:null},"Summation"),Object(l.b)("td",{parentName:"tr",align:null},"Takes two input operands and returns their sum"),Object(l.b)("td",{parentName:"tr",align:null},"3 + 5"),Object(l.b)("td",{parentName:"tr",align:null},"8")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",null,"-")),Object(l.b)("td",{parentName:"tr",align:null},"Difference"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("p",null,"Accepts two input operands and returns their difference"),Object(l.b)("br",null),Object(l.b)("p",null,"This operator also has a unary form, in which case the first operand is considered equal to 0")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("p",null,"5 - 3"),Object(l.b)("br",null),Object(l.b)("p",null,"-3")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("p",null,"2"),Object(l.b)("br",null),Object(l.b)("p",null,"-3"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",null,"*")),Object(l.b)("td",{parentName:"tr",align:null},"Multiplication"),Object(l.b)("td",{parentName:"tr",align:null},"Accepts two input operands and returns their product"),Object(l.b)("td",{parentName:"tr",align:null},"3 * 5"),Object(l.b)("td",{parentName:"tr",align:null},"15")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",null,"/")),Object(l.b)("td",{parentName:"tr",align:null},"Ratio"),Object(l.b)("td",{parentName:"tr",align:null},"Takes two input operands and returns their ratio"),Object(l.b)("td",{parentName:"tr",align:null},"15 / 3"),Object(l.b)("td",{parentName:"tr",align:null},"5")))),Object(l.b)("p",null,"All of these operators return ",Object(l.b)("strong",{parentName:"p"},"NULL")," if one of the operands is ",Object(l.b)("strong",{parentName:"p"},"NULL")," . It is also possible to use a special form of summation and difference operators with\xa0brackets, in which case ",Object(l.b)("strong",{parentName:"p"},"NULL")," will be equivalent to 0. The reverse is also true for these type of operators: if the result of an operator in such form is 0, then ",Object(l.b)("strong",{parentName:"p"},"NULL is returned")," (e. g., 5 (-) 5 = ",Object(l.b)("strong",{parentName:"p"},"NULL"),"):"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},Object(l.b)("strong",null,"Operator")),Object(l.b)("th",{parentName:"tr",align:null},Object(l.b)("strong",null,"Name")),Object(l.b)("th",{parentName:"tr",align:null},Object(l.b)("strong",null,"Description")),Object(l.b)("th",{parentName:"tr",align:null},Object(l.b)("strong",null,"Example")),Object(l.b)("th",{parentName:"tr",align:null},Object(l.b)("strong",null,"Result")))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",null,"(+)")),Object(l.b)("td",{parentName:"tr",align:null},"Summation"),Object(l.b)("td",{parentName:"tr",align:null},"Takes two input operands and returns their sum, treating ",Object(l.b)("strong",null,"NULL")," as 0"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("p",null,"3 (+) 5"),Object(l.b)("br",null),Object(l.b)("p",null,"3 (+) ",Object(l.b)("strong",null,"NULL"))),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("p",null,"8"),Object(l.b)("br",null),Object(l.b)("p",null,"3"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",null,"(-)")),Object(l.b)("td",{parentName:"tr",align:null},"Difference"),Object(l.b)("td",{parentName:"tr",align:null},"Takes two input operands and returns their difference, treating ",Object(l.b)("strong",null,"NULL")," as 0"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("p",null,"5 (-) 3"),Object(l.b)("br",null),Object(l.b)("p",null,"5 (-) ",Object(l.b)("strong",null,"NULL")),Object(l.b)("br",null),Object(l.b)("p",null,"5 (-) 5")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("p",null,"2"),Object(l.b)("br",null),Object(l.b)("p",null,"5"),Object(l.b)("br",null),Object(l.b)("p",null,Object(l.b)("strong",null,"NULL")))))),Object(l.b)("h3",{id:"determining-the-result-class"},"Determining the result class"),Object(l.b)("p",null,"The result class is determined as:"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Operator"),Object(l.b)("th",{parentName:"tr",align:null},"Result"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",null,"+"),", ",Object(l.b)("strong",null,"-")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("a",{parentName:"td",href:"/docusaurustest/docs/next/Built-in_classes#commonparentclass"},"Common ancestor"),' ("Numbers" family)')),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",null,"*")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("pre",null,Object(l.b)("code",null,"NUMERIC","[p1.IntegerPart + p1.Precision + p2.IntegerPart + p2.Precision, p1.Precision + p2.Precision]")))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",null,"/")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("pre",null,Object(l.b)("code",null,"NUMERIC","[p1.IntegerPart + p1.Precision + p2.IntegerPart + p2.Precision, p1.Precision + p2.IntegerPart]")))))),Object(l.b)("h3",{id:"language"},"Language"),Object(l.b)("p",null,"Description ",Object(l.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/Arithmetic_operators"},"of arithmetic operators"),"."),Object(l.b)("h3",{id:"examples"},"Examples"),Object(l.b)(b.CodeSample,{url:"https://documentation.lsfusion.org/sample?file=OperatorPropertySample&block=arithmetic",mdxType:"CodeSample"}))}u.isMDXComponent=!0},57:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return u})),n.d(t,"CodeSample",(function(){return p})),n.d(t,"default",(function(){return d}));var r=n(3),a=n(7),l=n(0),b=n.n(l),c=n(750),o=n(751),s={},i={unversionedId:"CodeSample",id:"CodeSample",isDocsHomePage:!1,title:"CodeSample",description:"const [content, setContent] = useState('')",source:"@site/docs/CodeSample.mdx",slug:"/CodeSample",permalink:"/docusaurustest/docs/next/CodeSample",editUrl:"https://github.com/danchanka/docusaurustest/edit/master/docs/CodeSample.mdx",version:"current"},u=[],p=function(e){var t=e.url,n=e.lines,r=Object(l.useState)(""),a=r[0],s=r[1];return Object(l.useEffect)((function(){fetch(t).then((function(e){return e.text()})).then((function(e){return s(e)}))}),[t,s]),a?n?Object(c.b)(b.a.Fragment,null,Object(c.b)(o.a,{className:"lsf",metastring:n,mdxType:"CodeBlock"},a),Object(c.b)("br",null)):Object(c.b)(b.a.Fragment,null,Object(c.b)(o.a,{className:"lsf",mdxType:"CodeBlock"},a),Object(c.b)("br",null)):Object(c.b)(o.a,{className:"lsf",mdxType:"CodeBlock"},"loading...")},m={toc:u,CodeSample:p};function d(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},m,n,{components:t,mdxType:"MDXLayout"}))}d.isMDXComponent=!0}}]);