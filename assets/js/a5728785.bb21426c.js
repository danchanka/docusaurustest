(window.webpackJsonp=window.webpackJsonp||[]).push([[444,436],{517:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return p})),r.d(t,"metadata",(function(){return i})),r.d(t,"toc",(function(){return c})),r.d(t,"default",(function(){return b}));var n=r(3),a=r(7),o=(r(0),r(750)),s=r(57),p={title:"Expression: Overview",sidebar_label:"Overview"},i={unversionedId:"Expression",id:"Expression",isDocsHomePage:!1,title:"Expression: Overview",description:"An expression is a combination of property operators and parameters. When an expression is evaluated sequentially in priority\xa0 order, all the operators are executed.",source:"@site/docs/Expression.md",slug:"/Expression",permalink:"/docusaurustest/docs/next/Expression",editUrl:"https://github.com/danchanka/docusaurustest/edit/master/docs/Expression.md",version:"current",sidebar_label:"Overview",sidebar:"docs",previous:{title:"Instruction =: Overview",permalink:"/docusaurustest/docs/next/Instruction_="},next:{title:"Operator priority",permalink:"/docusaurustest/docs/next/Operator_priority"}},c=[{value:"Examples",id:"examples",children:[]}],l={toc:c};function b(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},l,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"An ",Object(o.b)("em",{parentName:"p"},"expression")," is a combination of ",Object(o.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/Property_operators"},"property operators")," and ",Object(o.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/Properties"},"parameters"),". When an expression is evaluated sequentially in ",Object(o.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/Operator_priority"},"priority"),"\xa0 order, all the operators are executed."),Object(o.b)("p",null,"The result of that execution will be either a ",Object(o.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/Properties"},"property")," or a parameter (in the case of single-parameter expression). Their value shall be called the ",Object(o.b)("em",{parentName:"p"},"value")," of the expression."),Object(o.b)("p",null,"An expression can be described by the following set of recursive rules:"),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",{parentName:"tr",align:null},Object(o.b)("strong",null,"Rule")),Object(o.b)("th",{parentName:"tr",align:null},Object(o.b)("strong",null,"Description")))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("pre",null,Object(o.b)("code",null,"expression := parameter ","|"," constant ","|"," prefixOperator"))),Object(o.b)("td",{parentName:"tr",align:null},"A single parameter, ",Object(o.b)("a",{parentName:"td",href:"/docusaurustest/docs/next/Constant"},"constant"),", or non-arithmetic prefix operator")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("pre",null,Object(o.b)("code",null,"expression := prefixArithmOp expression"))),Object(o.b)("td",{parentName:"tr",align:null},"A unary arithmetic prefix operator, with the expression passed to it as an operand")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("pre",null,Object(o.b)("code",null,"expression := expression postfixOp"))),Object(o.b)("td",{parentName:"tr",align:null},"A unary postfix operator, with the expression passed to it as an operand")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("pre",null,Object(o.b)("code",null,"expression := expression binaryOp expression"))),Object(o.b)("td",{parentName:"tr",align:null},"A binary operator with the expressions passed to it as operands")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",{parentName:"tr",align:null},Object(o.b)("pre",null,Object(o.b)("code",null,"expression := ( expression )"))),Object(o.b)("td",{parentName:"tr",align:null},"Expression in parentheses")))),Object(o.b)("p",null,"An expression cannot include ",Object(o.b)("a",{parentName:"p",href:"/docusaurustest/docs/next/Property_operators#contextindependent"},"context-independent")," property operators."),Object(o.b)("h3",{id:"examples"},"Examples"),Object(o.b)(s.CodeSample,{url:"https://documentation.lsfusion.org/sample?file=ExpressionSample",mdxType:"CodeSample"}))}b.isMDXComponent=!0},57:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return c})),r.d(t,"metadata",(function(){return l})),r.d(t,"toc",(function(){return b})),r.d(t,"CodeSample",(function(){return u})),r.d(t,"default",(function(){return m}));var n=r(3),a=r(7),o=r(0),s=r.n(o),p=r(750),i=r(751),c={},l={unversionedId:"CodeSample",id:"CodeSample",isDocsHomePage:!1,title:"CodeSample",description:"const [content, setContent] = useState('')",source:"@site/docs/CodeSample.mdx",slug:"/CodeSample",permalink:"/docusaurustest/docs/next/CodeSample",editUrl:"https://github.com/danchanka/docusaurustest/edit/master/docs/CodeSample.mdx",version:"current"},b=[],u=function(e){var t=e.url,r=e.lines,n=Object(o.useState)(""),a=n[0],c=n[1];return Object(o.useEffect)((function(){fetch(t).then((function(e){return e.text()})).then((function(e){return c(e)}))}),[t,c]),a?r?Object(p.b)(s.a.Fragment,null,Object(p.b)(i.a,{className:"lsf",metastring:r,mdxType:"CodeBlock"},a),Object(p.b)("br",null)):Object(p.b)(s.a.Fragment,null,Object(p.b)(i.a,{className:"lsf",mdxType:"CodeBlock"},a),Object(p.b)("br",null)):Object(p.b)(i.a,{className:"lsf",mdxType:"CodeBlock"},"loading...")},d={toc:b,CodeSample:u};function m(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(p.b)("wrapper",Object(n.a)({},d,r,{components:t,mdxType:"MDXLayout"}))}m.isMDXComponent=!0}}]);