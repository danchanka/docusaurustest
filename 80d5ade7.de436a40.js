(window.webpackJsonp=window.webpackJsonp||[]).push([[188],{259:function(t,e,a){"use strict";a.r(e),a.d(e,"frontMatter",(function(){return c})),a.d(e,"metadata",(function(){return o})),a.d(e,"toc",(function(){return s})),a.d(e,"default",(function(){return p}));var r=a(3),n=a(7),b=(a(0),a(421)),l=a(56),c={title:"Arithmetic operators (+, -, *, ...)"},o={unversionedId:"Arithmetic_operators_+_-_...",id:"Arithmetic_operators_+_-_...",isDocsHomePage:!1,title:"Arithmetic operators (+, -, \\*, ...)",description:"Arithmetic operators\xa0create properties whose value is the result of an arithmetic operation.\xa0The arguments of these operators must be\xa0properties whose values are instances of number classes . The platform currently supports the following arithmetic operators:",source:"@site/docs\\Arithmetic_operators_+_-_....md",slug:"/Arithmetic_operators_+_-_...",permalink:"/docusaurustest/docs/Arithmetic_operators_+_-_...",editUrl:"https://github.com/danchanka/docusaurustest/edit/master/docs/Arithmetic_operators_+_-_....md",version:"current",sidebar:"docs",previous:{title:"Primitive operations",permalink:"/docusaurustest/docs/Primitive_operations"},next:{title:"Logical operators (AND, OR, NOT, XOR)",permalink:"/docusaurustest/docs/Logical_operators_AND_OR_NOT_XOR"}},s=[{value:"Determining the result class",id:"determining-the-result-class",children:[]},{value:"Language",id:"language",children:[]},{value:"Examples",id:"examples",children:[]}],i={toc:s};function p(t){var e=t.components,a=Object(n.a)(t,["components"]);return Object(b.b)("wrapper",Object(r.a)({},i,a,{components:e,mdxType:"MDXLayout"}),Object(b.b)("p",null,Object(b.b)("em",{parentName:"p"},"Arithmetic operators"),"\xa0create ",Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"/docusaurustest/docs/Properties"}),"properties")," whose value is the result of an arithmetic operation.\xa0The arguments of these operators must be\xa0properties whose values are instances of ",Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"/docusaurustest/docs/Built-in_classes"}),"number classes")," . The platform currently supports the following arithmetic operators:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Operator"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Name"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Description"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Example"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Result"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",null,"+")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Summation"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Takes two input operands and returns their sum"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"3 + 5"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"8")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",null,"-")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Difference"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("p",null,"Accepts two input operands and returns their difference"),Object(b.b)("br",null),Object(b.b)("p",null,"This operator also has a unary form, in which case the first operand is considered equal to 0")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("p",null,"5 - 3"),Object(b.b)("br",null),Object(b.b)("p",null,"-3")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("p",null,"2"),Object(b.b)("br",null),Object(b.b)("p",null,"-3"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",null,"*")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Multiplication"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Accepts two input operands and returns their product"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"3 * 5"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"15")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",null,"/")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Ratio"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Takes two input operands and returns their ratio"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"15 / 3"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"5")))),Object(b.b)("p",null,"All of these operators return ",Object(b.b)("strong",{parentName:"p"},"NULL")," if one of the operands is ",Object(b.b)("strong",{parentName:"p"},"NULL")," . It is also possible to use a special form of summation and difference operators with\xa0brackets, in which case ",Object(b.b)("strong",{parentName:"p"},"NULL")," will be equivalent to 0. The reverse is also true for these type of operators: if the result of an operator in such form is 0, then ",Object(b.b)("strong",{parentName:"p"},"NULL is returned")," (e. g., 5 (-) 5 = ",Object(b.b)("strong",{parentName:"p"},"NULL"),"):"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",null,"Operator")),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",null,"Name")),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",null,"Description")),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",null,"Example")),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",null,"Result")))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",null,"(+)")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Summation"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Takes two input operands and returns their sum, treating ",Object(b.b)("strong",null,"NULL")," as 0"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("p",null,"3 (+) 5"),Object(b.b)("br",null),Object(b.b)("p",null,"3 (+) ",Object(b.b)("strong",null,"NULL"))),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("p",null,"8"),Object(b.b)("br",null),Object(b.b)("p",null,"3"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",null,"(-)")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Difference"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Takes two input operands and returns their difference, treating ",Object(b.b)("strong",null,"NULL")," as 0"),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("p",null,"5 (-) 3"),Object(b.b)("br",null),Object(b.b)("p",null,"5 (-) ",Object(b.b)("strong",null,"NULL")),Object(b.b)("br",null),Object(b.b)("p",null,"5 (-) 5")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("p",null,"2"),Object(b.b)("br",null),Object(b.b)("p",null,"5"),Object(b.b)("br",null),Object(b.b)("p",null,Object(b.b)("strong",null,"NULL")))))),Object(b.b)("h3",{id:"determining-the-result-class"},"Determining the result class"),Object(b.b)("p",null,"The result class is determined as:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Operator"),Object(b.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Result"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",null,"+"),", ",Object(b.b)("strong",null,"-")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("a",Object(r.a)({parentName:"td"},{href:"/docusaurustest/docs/Built-in_classes#common-ancestor"}),"Common ancestor"),' ("Numbers" family)')),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",null,"*")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("pre",null,Object(b.b)("code",null,"NUMERIC","[p1.IntegerPart + p1.Precision + p2.IntegerPart + p2.Precision, p1.Precision + p2.Precision]")))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",null,"/")),Object(b.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(b.b)("pre",null,Object(b.b)("code",null,"NUMERIC","[p1.IntegerPart + p1.Precision + p2.IntegerPart + p2.Precision, p1.Precision + p2.IntegerPart]")))))),Object(b.b)("h3",{id:"language"},"Language"),Object(b.b)("p",null,"Description ",Object(b.b)("a",Object(r.a)({parentName:"p"},{href:"/docusaurustest/docs/Arithmetic_operators"}),"of arithmetic operators"),"."),Object(b.b)("h3",{id:"examples"},"Examples"),Object(b.b)(l.CodeSample,{url:"https://documentation.lsfusion.org/sample?file=OperatorPropertySample&block=arithmetic",mdxType:"CodeSample"}))}p.isMDXComponent=!0}}]);