(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{125:function(e,t,s){"use strict";s.r(t),s.d(t,"frontMatter",(function(){return r})),s.d(t,"metadata",(function(){return c})),s.d(t,"toc",(function(){return o})),s.d(t,"default",(function(){return p}));var n=s(3),a=s(7),i=(s(0),s(421)),r={title:"Built-in classes"},c={unversionedId:"Built-in_classes",id:"Built-in_classes",isDocsHomePage:!1,title:"Built-in classes",description:"Built-in classes are classes whose instances are objects belonging to primitive data types such as integers, strings, etc.",source:"@site/docs\\Built-in_classes.md",slug:"/Built-in_classes",permalink:"/docusaurustest/docs/Built-in_classes",editUrl:"https://github.com/danchanka/docusaurustest/edit/master/docs/Built-in_classes.md",version:"current",sidebar:"docs",previous:{title:"Classes",permalink:"/docusaurustest/docs/Classes"},next:{title:"Static objects",permalink:"/docusaurustest/docs/Static_objects"}},o=[{value:"Inheritance",id:"inheritance",children:[]},{value:"<strong>Common ancestor</strong>",id:"common-ancestor",children:[]},{value:"Default value",id:"default-value",children:[]},{value:"Extensions of specific type files",id:"extensions-of-specific-type-files",children:[]},{value:"The order of determining the result property when accessing from an external system",id:"the-order-of-determining-the-result-property-when-accessing-from-an-external-system",children:[]}],l={toc:o};function p(e){var t=e.components,s=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},l,s,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Built-in classes")," are ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docusaurustest/docs/Classes"}),"classes")," whose instances are objects belonging to primitive data types such as integers, strings, etc.\xa0"),Object(i.b)("p",null,"[table was removed]"),Object(i.b)("h3",{id:"inheritance"},"Inheritance"),Object(i.b)("p",null,"The builtin classes can be divided into four class ",Object(i.b)("em",{parentName:"p"},"families"),"\xa0(assuming that each\xa0of the remaining classes forms its own class family)"),Object(i.b)("p",null,"[table was removed]"),Object(i.b)("p",null,"The builtin classes inherit only from one another within a single family, and cannot inherit from or be inherited by user classes. Inheritance within each family works on the principle that the narrower class inherits from the broader one."),Object(i.b)("h3",{id:"common-ancestor"},Object(i.b)("strong",{parentName:"h3"},"Common ancestor")),Object(i.b)("p",null,"According to this inheritance mechanism, the common ancestor of two builtin classes (e.g. for the\xa0",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docusaurustest/docs/Selection_CASE_IF_MULTI_OVERRIDE_EXCLUSIVE"}),"selection")," operation) is determined as follows:"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Strings"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"result = STRING[blankPadded = s1.blankPadded OR s2.blankPadded, caseInsensitive = s1.caseInsensitive OR s2.caseInsensitive, length = MAX(s1.length, s2.length)]\n")),Object(i.b)("p",null,"where ",Object(i.b)("em",{parentName:"p"},"blankPadded"),", ",Object(i.b)("em",{parentName:"p"},"caseInsensitive")," and ",Object(i.b)("em",{parentName:"p"},"length")," are in turn determined as:"),Object(i.b)("p",null,"[table was removed]"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Numbers"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"IF p1.integerPart >= p2.integerPart AND p1.precision >= p2.precision\n    result = p1\xa0\nELSE IF p1.integerPart >= p2.integerPart AND p1.precision >= p2.precision\n    result = p2\xa0\nELSE IF p1.integerPart > p2.integerPart \xa0\n    result = NUMERIC[p1.integerPart+p2.precision, p2.precision]\nELSE \xa0\n    result = NUMERIC[p2.integerPart+p1.precision, p1.precision]\n")),Object(i.b)("p",null,"where integerPart and precision, in turn, are determined as:"),Object(i.b)("p",null,"[table was removed]"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Files of a specific type"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"IF p1 = p2\n    result = p1\nELSE\n    result = RAWFILE\n")),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Links to files of a specific type"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"IF p1 = p2\n    result = p1\nELSE\n    result = RAWLINK\n")),Object(i.b)("p",null,"Note that sometimes in programming the definition of a common parent class is associated with ",Object(i.b)("em",{parentName:"p"},"implicit typecasting"),"."),Object(i.b)("h3",{id:"default-value"},"Default value"),Object(i.b)("p",null,"It is sometimes necessary to use some value for a built-in class which will differ from ",Object(i.b)("strong",{parentName:"p"},"NULL")," (for example, in an import condition with ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docusaurustest/docs/Data_import_IMPORT"}),"data import"),"). Let's call this value the ",Object(i.b)("em",{parentName:"p"},"default value"),". It is defined as follows:"),Object(i.b)("p",null,"[table was removed]"),Object(i.b)("h3",{id:"extensions-of-specific-type-files"},"Extensions of specific type files"),Object(i.b)("p",null,"When files of a specific type (",Object(i.b)("strong",{parentName:"p"},"JSONFILE"),", ",Object(i.b)("strong",{parentName:"p"},"XMLFILE"),", ...) are cast into a file of dynamic type (",Object(i.b)("strong",{parentName:"p"},"FILE"),"), whether explicitly or implicitly (e.g. with ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docusaurustest/docs/Data_import_IMPORT"}),"data import"),"\xa0without specifying a format or when ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docusaurustest/docs/Access_to_an_external_system_EXTERNAL"}),"working with external systems"),"), the extension of the result file is determined as follows:"),Object(i.b)("p",null,"[table was removed]"),Object(i.b)("h3",{id:"the-order-of-determining-the-result-property-when-accessing-from-an-external-system"},"The order of determining the result property when ",Object(i.b)("a",Object(n.a)({parentName:"h3"},{href:"/docusaurustest/docs/Access_from_an_external_system#httpresult-broken"}),"accessing from an external system")),Object(i.b)("p",null,"[table was removed]"))}p.isMDXComponent=!0}}]);