(window.webpackJsonp=window.webpackJsonp||[]).push([[151],{223:function(t,e,n){"use strict";n.r(e),n.d(e,"frontMatter",(function(){return c})),n.d(e,"metadata",(function(){return s})),n.d(e,"toc",(function(){return o})),n.d(e,"default",(function(){return p}));var r=n(3),a=n(7),b=(n(0),n(423)),l=n(424),c={title:"String operators (+, CONCAT, SUBSTRING)"},s={unversionedId:"String_operators_+_CONCAT_SUBSTRING",id:"String_operators_+_CONCAT_SUBSTRING",isDocsHomePage:!1,title:"String operators (+, CONCAT, SUBSTRING)",description:"String operators are operators which parameters and result are the properties which values are instances of the string classes. The platform currently supports the following string operators:",source:"@site/docs/String_operators_+_CONCAT_SUBSTRING.md",slug:"/String_operators_+_CONCAT_SUBSTRING",permalink:"/docusaurustest/ru/docs/String_operators_+_CONCAT_SUBSTRING",editUrl:"https://github.com/danchanka/docusaurustest/edit/master/docs/String_operators_+_CONCAT_SUBSTRING.md",version:"current",sidebar:"docs",previous:{title:"Extremum (MAX, MIN)",permalink:"/docusaurustest/ru/docs/Extremum_MAX_MIN"},next:{title:"Structure operations (STRUCT, \\[\\])",permalink:"/docusaurustest/ru/docs/Structure_operations_STRUCT"}},o=[{value:"Determining the result class",id:"determining-the-result-class",children:[]},{value:"Examples",id:"examples",children:[]}],i={toc:o};function p(t){var e=t.components,n=Object(a.a)(t,["components"]);return Object(b.b)("wrapper",Object(r.a)({},i,n,{components:e,mdxType:"MDXLayout"}),Object(b.b)("p",null,"String operators are operators which parameters and result are the properties which values are instances of the string classes. The platform currently supports the following string operators:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null},Object(b.b)("div",null,Object(b.b)("br",null),Object(b.b)("div",null,Object(b.b)("br",null),"Operator",Object(b.b)("br",null)),Object(b.b)("br",null))),Object(b.b)("th",{parentName:"tr",align:null},Object(b.b)("div",null,Object(b.b)("br",null),Object(b.b)("div",null,Object(b.b)("br",null),"Name",Object(b.b)("br",null)),Object(b.b)("br",null))),Object(b.b)("th",{parentName:"tr",align:null},Object(b.b)("div",null,Object(b.b)("br",null),Object(b.b)("div",null,Object(b.b)("br",null),"Description",Object(b.b)("br",null)),Object(b.b)("br",null))),Object(b.b)("th",{parentName:"tr",align:null},Object(b.b)("div",null,Object(b.b)("br",null),Object(b.b)("div",null,Object(b.b)("br",null),"Example",Object(b.b)("br",null)),Object(b.b)("br",null))),Object(b.b)("th",{parentName:"tr",align:null},Object(b.b)("div",null,Object(b.b)("br",null),Object(b.b)("div",null,Object(b.b)("br",null),"Result",Object(b.b)("br",null)),Object(b.b)("br",null))))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",null,"+, ",Object(b.b)("strong",null,Object(b.b)("a",{parentName:"td",href:"/docusaurustest/ru/docs/CONCAT_operator"},"CONCAT")))),Object(b.b)("td",{parentName:"tr",align:null},"Concatenation"),Object(b.b)("td",{parentName:"tr",align:null},"Takes two operands and returns a string obtained by concatenating the strings specified in the operands"),Object(b.b)("td",{parentName:"tr",align:null},"'a' + 'b'"),Object(b.b)("td",{parentName:"tr",align:null},"'ab'")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",null,"SUBSTRING")),Object(b.b)("td",{parentName:"tr",align:null},"Substring"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("p",null,"Takes three operands and\xa0returns a substring obtained from the string specified in the first operand, starting with the character specified in the second operand, and having length specified in the third operand")),Object(b.b)("td",{parentName:"tr",align:null},"SUBSTRING('abc', 2, 2)"),Object(b.b)("td",{parentName:"tr",align:null},"'bc'")))),Object(b.b)("p",null,"The ",Object(b.b)("strong",{parentName:"p"},"+")," and ",Object(b.b)("strong",{parentName:"p"},"SUBSTRING")," operators return ",Object(b.b)("strong",{parentName:"p"},"NULL")," if one of the operands is ",Object(b.b)("strong",{parentName:"p"},"NULL"),".\xa0The ",Object(b.b)("strong",{parentName:"p"},"CONCAT"),"\xa0operator treats\xa0",Object(b.b)("strong",{parentName:"p"},"NULL"),"\xa0value of the operand as an empty string (however, concatenation of two ",Object(b.b)("strong",{parentName:"p"},"NULL")," values still returns ",Object(b.b)("strong",{parentName:"p"},"NULL"),"). Also, in the ",Object(b.b)("strong",{parentName:"p"},"CONCAT")," operator you can optionally specify the third operand (",Object(b.b)("em",{parentName:"p"},"delimiter"),") which will be inserted if and only if both operands are not ",Object(b.b)("strong",{parentName:"p"},"NULL"),". For example, CONCAT ' ', 'John', 'Smith' = 'John Smith', but CONCAT ' ', 'John', NULL = 'John'."),Object(b.b)("h3",{id:"determining-the-result-class"},"Determining the result class"),Object(b.b)("p",null,"The result class is defined as:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null},"Operator"),Object(b.b)("th",{parentName:"tr",align:null},"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",null,"+"),", ",Object(b.b)("strong",null,"CONCAT")),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("pre",null,Object(b.b)("code",null,"result = STRING","[p1.blankPadded AND p2.blankPadded, p1.caseInsensitive OR p2.caseInsensitive, p1.length + p2.length]")))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",null,"SUBSTRING(p, from, length)")),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("pre",null,Object(b.b)("code",null,"result = STRING","[p.blankPadded, p.caseInsensitive, length]")))))),Object(b.b)("p",null,"where ",Object(b.b)("em",{parentName:"p"},"blankPadded"),",\xa0",Object(b.b)("em",{parentName:"p"},"caseInsensitive"),"\xa0and\xa0",Object(b.b)("em",{parentName:"p"},"length")," are determined similarly to the rules for construction of a common ancestor\xa0for two\xa0built-in classes (Strings family)."),Object(b.b)("p",null,"In the + operator, operands which classes are other than string are cast to strings in accordance with the following table:"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",{parentName:"tr",align:null},"Class"),Object(b.b)("th",{parentName:"tr",align:null},"Cast class"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("p",null,Object(b.b)("strong",null,"DATE"),", ",Object(b.b)("strong",null,"DATETIME"),", ",Object(b.b)("strong",null,"TIME"))),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",null,"STRING","[25]"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",null,"NUMERIC")),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",null,"STRING","[p.length]"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",null,"LOGICAL")),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",null,"STRING","[1]"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",null,"FILE")),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",null,"TEXT"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("a",{parentName:"td",href:"/docusaurustest/ru/docs/User_classes"},"Object")),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",null,"STRING","[10]"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",{parentName:"tr",align:null},"Other"),Object(b.b)("td",{parentName:"tr",align:null},Object(b.b)("strong",null,"STRING","[8]"))))),Object(b.b)("h3",{id:"examples"},"Examples"),Object(b.b)(l.a,{url:"https://documentation.lsfusion.org/sample?file=OperatorPropertySample&block=concat",mdxType:"CodeSample"}))}p.isMDXComponent=!0}}]);