(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{142:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return u}));var o=n(3),a=n(7),r=(n(0),n(421)),s=n(56),i={title:"Type conversion"},c={unversionedId:"Type_conversion",id:"Type_conversion",isDocsHomePage:!1,title:"Type conversion",description:"The type conversion operator creates a property that converts an object of one\xa0built-in class\xa0to an object of another built-in class. If type conversion is not possible, the property value will be NULL.",source:"@site/docs\\Type_conversion.md",slug:"/Type_conversion",permalink:"/docusaurustest/docs/Type_conversion",editUrl:"https://github.com/danchanka/docusaurustest/edit/master/docs/Type_conversion.md",version:"current",sidebar:"docs",previous:{title:"Structure operations (STRUCT, \\[\\])",permalink:"/docusaurustest/docs/Structure_operations_STRUCT"},next:{title:"Class operations",permalink:"/docusaurustest/docs/Class_operations"}},p=[{value:"String and file types",id:"string-and-file-types",children:[]},{value:"Language",id:"language",children:[]},{value:"Examples",id:"examples",children:[]}],l={toc:p};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"The ",Object(r.b)("em",{parentName:"p"},"type conversion")," operator creates a ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/docusaurustest/docs/Properties"}),"property")," that converts an object of one\xa0",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/docusaurustest/docs/Built-in_classes"}),"built-in class"),"\xa0to an object of another built-in class. If type conversion is not possible, the property value will be ",Object(r.b)("strong",{parentName:"p"},"NULL"),"."),Object(r.b)("h3",{id:"string-and-file-types"},"String and file types"),Object(r.b)("p",null,"String types can be converted to human-readable file types (",Object(r.b)("strong",{parentName:"p"},"CSVFILE"),", ",Object(r.b)("strong",{parentName:"p"},"XMLFILE"),", ",Object(r.b)("strong",{parentName:"p"},"JSONFILE"),", ",Object(r.b)("strong",{parentName:"p"},"HTMLFILE"),", etc.), and vice versa - human-readable file types can be converted to string types."),Object(r.b)("p",null,"Converting dynamic-type files (",Object(r.b)("strong",{parentName:"p"},"FILE"),") to strings and vice versa is prohibited in the current implementation, but if necessary this can be done via an intermediate human-readable type - for example, by first converting to ",Object(r.b)("strong",{parentName:"p"},"CSVFILE"),", and only then to ",Object(r.b)("strong",{parentName:"p"},"FILE")," (the resulting file ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/docusaurustest/docs/Built-in_classes#csv-broken"}),"will have the extension")," CSV)"),Object(r.b)("h3",{id:"language"},"Language"),Object(r.b)("p",null,"To implement conversion, the\xa0",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/docusaurustest/docs/Type_conversion_operator"}),"type conversion operator")," is used."),Object(r.b)("h3",{id:"examples"},"Examples"),Object(r.b)(s.CodeSample,{url:"http://documentation.lsfusion.org:5000/sample?file=OperatorPropertySample&block=explicitcast",mdxType:"CodeSample"}))}u.isMDXComponent=!0}}]);