(window.webpackJsonp=window.webpackJsonp||[]).push([[140],{211:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return p})),r.d(t,"metadata",(function(){return c})),r.d(t,"toc",(function(){return i})),r.d(t,"default",(function(){return u}));var a=r(3),o=r(7),n=(r(0),r(421)),s=r(56),p={title:"Change operators"},c={unversionedId:"Change_operators",id:"Change_operators",isDocsHomePage:!1,title:"Change operators",description:"Change operators - a set of operators that determine various types of property value changes.",source:"@site/docs\\Change_operators.md",slug:"/Change_operators",permalink:"/docusaurustest/docs/Change_operators",editUrl:"https://github.com/danchanka/docusaurustest/edit/master/docs/Change_operators.md",version:"current",sidebar:"docs",previous:{title:"IS, AS operators",permalink:"/docusaurustest/docs/IS_AS_operators"},next:{title:"Comparison operators",permalink:"/docusaurustest/docs/Comparison_operators"}},i=[{value:"Syntax",id:"syntax",children:[]},{value:"Description",id:"description",children:[]},{value:"Parameters",id:"parameters",children:[]},{value:"Examples",id:"examples",children:[]}],b={toc:i};function u(e){var t=e.components,r=Object(o.a)(e,["components"]);return Object(n.b)("wrapper",Object(a.a)({},b,r,{components:t,mdxType:"MDXLayout"}),Object(n.b)("p",null,"Change operators - a set of operators that determine various types of ",Object(n.b)("a",Object(a.a)({parentName:"p"},{href:"/docusaurustest/docs/Change_operators_SET_CHANGED_..."}),"property value changes"),".\xa0"),Object(n.b)("h3",{id:"syntax"},"Syntax"),Object(n.b)("pre",null,Object(n.b)("code",Object(a.a)({parentName:"pre"},{}),"typeChange(propExpr)\n")),Object(n.b)("h3",{id:"description"},"Description"),Object(n.b)("p",null,"Change operators create ",Object(n.b)("a",Object(a.a)({parentName:"p"},{href:"/docusaurustest/docs/Properties"}),"actions")," which\xa0determine whether some types of changes have been made for a\xa0certain property in the current session."),Object(n.b)("h3",{id:"parameters"},"Parameters"),Object(n.b)("p",null,Object(n.b)("em",{parentName:"p"},"typeChange")),Object(n.b)("p",null,"Type of the change operator. It is specified by one of the keywords:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"SET")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"CHANGED")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"DROPPED")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"SETCHANGED")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"DROPCHANGED")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("strong",{parentName:"li"},"SETDROPPED"))),Object(n.b)("p",null,Object(n.b)("em",{parentName:"p"},"propExpr")),Object(n.b)("p",null,"An ",Object(n.b)("a",Object(a.a)({parentName:"p"},{href:"/docusaurustest/docs/Expression"}),"expression")," which value defines the property that should be checked for the presence of a change."),Object(n.b)("h3",{id:"examples"},"Examples"),Object(n.b)(s.CodeSample,{url:"http://documentation.lsfusion.org:5000/sample?file=OperatorPropertySample&block=changed",mdxType:"CodeSample"}),Object(n.b)("p",null,"**",Object(n.b)("br",{parentName:"p"}),"\n","**"))}u.isMDXComponent=!0}}]);